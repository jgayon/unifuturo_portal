-- Entregable #3: Script SQL para Implementar el Modelo Relacional en Oracle XE

-- IMPORTANTE: Ejecuta estas sentencias DROP TABLE en orden inverso a la creación
-- si necesitas volver a ejecutar el script y limpiar las tablas existentes.
-- Esto evita errores de restricciones de clave externa.

-- DROP TABLE Homologacion;
-- DROP TABLE Pago;
-- DROP TABLE Documentos;
-- DROP TABLE Inscripcion;
-- DROP TABLE Programa_Asignatura; -- Nueva tabla de unión
-- DROP TABLE Oferta_Requisito;    -- Nueva tabla de unión
-- DROP TABLE Asignaturas;
-- DROP TABLE Programa;
-- DROP TABLE Requisitos;
-- DROP TABLE Oferta;
-- DROP TABLE Usuario;

---

-- 1. Crear TABLA Usuario (actualizada para coincidir con el formulario)
CREATE TABLE "Usuario" (
    id_usuario          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(100) NOT NULL,
    apellido            VARCHAR2(100) NOT NULL,
    telefono            VARCHAR2(20) NOT NULL,
    direccion           VARCHAR2(255) NOT NULL,
    tipo_documento      VARCHAR2(50) NOT NULL,
    num_documento       VARCHAR2(50) NOT NULL UNIQUE,
    fecha_nacimiento    DATE NOT NULL,
    correo              VARCHAR2(255) NOT NULL UNIQUE,
    contrasena          VARCHAR2(255) NOT NULL,
    tipo_usuario        VARCHAR2(50) NOT NULL
);

-- Añadir comentarios para mejor documentación
COMMENT ON TABLE "Usuario" IS 'Almacena información sobre los usuarios del sistema, incluyendo administradores y clientes.';
COMMENT ON COLUMN "Usuario".id_usuario IS 'Clave primaria para la tabla Usuario, auto-generada.';
COMMENT ON COLUMN "Usuario".num_documento IS 'Número de identificación único del usuario.';
COMMENT ON COLUMN "Usuario".correo IS 'Dirección de correo electrónico única para el inicio de sesión del usuario.';
COMMENT ON COLUMN "Usuario".tipo_usuario IS 'Define el rol del usuario (ej. Administrador, Cliente).';

---

-- 2. Crear TABLA Requisitos
CREATE TABLE "Requisitos" (
    id_requisito        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_doc          VARCHAR2(255) NOT NULL UNIQUE
);

-- Añadir comentarios
COMMENT ON TABLE "Requisitos" IS 'Define los tipos de documentos requeridos para la inscripción.';
COMMENT ON COLUMN "Requisitos".id_requisito IS 'Clave primaria para la tabla Requisitos, auto-generada.';
COMMENT ON COLUMN "Requisitos".nombre_doc IS 'Nombre del documento requerido.';

---

-- 3. Crear TABLA Asignaturas
CREATE TABLE "Asignaturas" (
    id_asignatura       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(255) NOT NULL,
    semestre            NUMBER NOT NULL,
    descripcion         VARCHAR2(500)
);

-- Añadir comentarios
COMMENT ON TABLE "Asignaturas" IS 'Almacena información sobre las asignaturas académicas ofrecidas por UNIFUTURO.';
COMMENT ON COLUMN "Asignaturas".id_asignatura IS 'Clave primaria para la tabla Asignaturas, auto-generada.';
COMMENT ON COLUMN "Asignaturas".nombre IS 'Nombre de la asignatura académica.';
COMMENT ON COLUMN "Asignaturas".semestre IS 'El semestre recomendado para esta asignatura dentro de un programa.';

---

-- 4. Crear TABLA Programa
CREATE TABLE "Programa" (
    id_programa         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(255) NOT NULL,
    num_semestres       NUMBER NOT NULL,
    descripcion         VARCHAR2(500)
);

-- Añadir comentarios
COMMENT ON TABLE "Programa" IS 'Almacena información sobre los programas académicos ofrecidos (ej. Ingeniería de Sistemas, Derecho).';
COMMENT ON COLUMN "Programa".id_programa IS 'Clave primaria para la tabla Programa, auto-generada.';
COMMENT ON COLUMN "Programa".nombre IS 'Nombre del programa académico.';
COMMENT ON COLUMN "Programa".num_semestres IS 'Número total de semestres para el programa.';

---

-- 5. Crear TABLA Oferta
CREATE TABLE "Oferta" (
    id_oferta           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_programa         NUMBER NOT NULL,
    periodo_academico   VARCHAR2(10) NOT NULL,
    titulo_conduce      VARCHAR2(255) NOT NULL,
    costo_inscripcion   NUMBER(10, 2) NOT NULL,
    costo_programa      NUMBER(12, 2) NOT NULL,
    descripcion_oferta  VARCHAR2(500),
    activa              CHAR(1) DEFAULT 'S' NOT NULL CHECK (activa IN ('S', 'N')),
    CONSTRAINT fk_oferta_programa FOREIGN KEY (id_programa) REFERENCES Programa (id_programa)
);

-- Añadir comentarios
COMMENT ON TABLE "Oferta" IS 'Representa una oferta específica de un programa académico para un periodo dado.';
COMMENT ON COLUMN "Oferta".id_oferta IS 'Clave primaria para la tabla Oferta, auto-generada.';
COMMENT ON COLUMN "Oferta".periodo_academico IS 'Periodo académico para el cual la oferta es válida (ej. 2025-10, 2025-30).';

---

-- 6. Crear Tabla de Unión: Oferta_Requisito
CREATE TABLE "Oferta_Requisito" (
    id_oferta           NUMBER NOT NULL,
    id_requisito        NUMBER NOT NULL,
    PRIMARY KEY (id_oferta, id_requisito),
    CONSTRAINT fk_oferta_req_oferta FOREIGN KEY (id_oferta) REFERENCES Oferta (id_oferta),
    CONSTRAINT fk_oferta_req_requisito FOREIGN KEY (id_requisito) REFERENCES Requisitos (id_requisito)
);

-- Añadir comentarios
COMMENT ON TABLE "Oferta_Requisito" IS 'Vincula ofertas académicas específicas con sus documentos requeridos.';

---

-- 7. Crear Tabla de Unión: Programa_Asignatura
CREATE TABLE "Programa_Asignatura" (
    id_programa         NUMBER NOT NULL,
    id_asignatura       NUMBER NOT NULL,
    semestre_en_programa NUMBER NOT NULL,
    PRIMARY KEY (id_programa, id_asignatura),
    CONSTRAINT fk_prog_asig_programa FOREIGN KEY (id_programa) REFERENCES Programa (id_programa),
    CONSTRAINT fk_prog_asig_asignatura FOREIGN KEY (id_asignatura) REFERENCES Asignaturas (id_asignatura)
);

-- Añadir comentarios
COMMENT ON TABLE "Programa_Asignatura" IS 'Mapea asignaturas a programas académicos específicos, indicando el semestre en que se cursan.';

---

-- 8. Crear TABLA Inscripcion
CREATE TABLE "Inscripcion" (
    id_inscripcion      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_usuario          NUMBER NOT NULL,
    id_oferta           NUMBER NOT NULL,
    tipo_prospecto      VARCHAR2(50) NOT NULL,
    fecha_inscripcion   DATE DEFAULT SYSDATE NOT NULL,
    estado_inscripcion  VARCHAR2(50) DEFAULT 'En progreso' NOT NULL,
    comentarios_admin   VARCHAR2(1000),
    CONSTRAINT fk_inscripcion_usuario FOREIGN KEY (id_usuario) REFERENCES "Usuario" (id_usuario),
    CONSTRAINT fk_inscripcion_oferta FOREIGN KEY (id_oferta) REFERENCES Oferta (id_oferta)
);

-- Añadir comentarios
COMMENT ON TABLE "Inscripcion" IS 'Registra los detalles de la solicitud de un prospecto a una oferta académica específica.';

---

-- 9. Crear TABLA Pago
CREATE TABLE "Pago" (
    id_pago             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion      NUMBER NOT NULL UNIQUE,
    monto_pago          NUMBER(12, 2) NOT NULL,
    fecha_pago          DATE DEFAULT SYSDATE NOT NULL,
    estado_pago         VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    referencia_pago     VARCHAR2(100),
    CONSTRAINT fk_pago_inscripcion FOREIGN KEY (id_inscripcion) REFERENCES Inscripcion (id_inscripcion)
);

-- Añadir comentarios
COMMENT ON TABLE "Pago" IS 'Registra los detalles de pago de una inscripción.';

---

-- 10. Crear TABLA Documentos
CREATE TABLE "Documentos" (
    id_documento        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion      NUMBER NOT NULL,
    id_requisito        NUMBER,
    nombre_archivo      VARCHAR2(255) NOT NULL,
    ruta_archivo        VARCHAR2(500) NOT NULL,
    tipo_mime           VARCHAR2(100),
    fecha_subida        DATE DEFAULT SYSDATE NOT NULL,
    estado_documento    VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    comentarios_admin   VARCHAR2(500),
    CONSTRAINT fk_documentos_inscripcion FOREIGN KEY (id_inscripcion) REFERENCES Inscripcion (id_inscripcion),
    CONSTRAINT fk_documentos_requisito FOREIGN KEY (id_requisito) REFERENCES Requisitos (id_requisito)
);

-- Añadir comentarios
COMMENT ON TABLE "Documentos" IS 'Almacena información sobre los documentos subidos por los prospectos para su inscripción.';

---

-- 11. Crear TABLA Homologacion
CREATE TABLE "Homologacion" (
    id_homologacion         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion          NUMBER NOT NULL,
    id_asignatura_programa  NUMBER NOT NULL,
    nombre_asignatura_externa VARCHAR2(255) NOT NULL,
    justificacion           VARCHAR2(1000),
    estado_homologacion     VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    comentarios_admin       VARCHAR2(500),
    CONSTRAINT fk_homologacion_inscripcion FOREIGN KEY (id_inscripcion) REFERENCES Inscripcion (id_inscripcion),
    CONSTRAINT fk_homologacion_asignatura FOREIGN KEY (id_asignatura_programa) REFERENCES Asignaturas (id_asignatura)
);

-- Añadir comentarios
COMMENT ON TABLE "Homologacion" IS 'Registra las solicitudes de homologación de asignaturas de estudiantes de transferencia.';

---

-- Índices para mejorar el rendimiento
CREATE INDEX idx_usuario_correo ON "Usuario" (correo);
CREATE INDEX idx_usuario_documento ON "Usuario" (num_documento);
CREATE INDEX idx_inscripcion_usuario ON "Inscripcion" (id_usuario);
CREATE INDEX idx_inscripcion_oferta ON "Inscripcion" (id_oferta);
CREATE INDEX idx_documentos_inscripcion ON "Documentos" (id_inscripcion);


-- 1. Eliminación de tablas existentes (en orden inverso)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Homologacion" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Pago" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Documentos" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Inscripcion" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Programa_Asignatura" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Oferta_Requisito" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Oferta" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Asignaturas" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Programa" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Requisitos" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Usuario" CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- 2. Creación de tablas (en orden correcto de dependencias)

-- Tablas independientes
CREATE TABLE "Usuario" (
    id_usuario NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    apellido VARCHAR2(100) NOT NULL,
    telefono VARCHAR2(20),
    direccion VARCHAR2(255),
    tipo_documento VARCHAR2(50) NOT NULL,
    num_documento VARCHAR2(50) NOT NULL UNIQUE,
    fecha_nacimiento DATE,
    correo VARCHAR2(255) NOT NULL UNIQUE,
    contrasena VARCHAR2(255) NOT NULL,
    tipo_usuario VARCHAR2(50) NOT NULL
);

CREATE TABLE "Requisitos" (
    id_requisito NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre_doc VARCHAR2(255) NOT NULL UNIQUE
);

CREATE TABLE "Asignaturas" (
    id_asignatura NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(255) NOT NULL,
    semestre NUMBER NOT NULL,
    descripcion VARCHAR2(500)
);

CREATE TABLE "Programa" (
    id_programa NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(255) NOT NULL,
    num_semestres NUMBER NOT NULL,
    descripcion VARCHAR2(500)
);

-- Tablas con dependencias
CREATE TABLE "Oferta" (
    id_oferta NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_programa NUMBER NOT NULL,
    periodo_academico VARCHAR2(10) NOT NULL,
    titulo_conduce VARCHAR2(255) NOT NULL,
    costo_inscripcion NUMBER(10, 2) NOT NULL,
    costo_programa NUMBER(12, 2) NOT NULL,
    descripcion_oferta VARCHAR2(500),
    activa CHAR(1) DEFAULT 'S' NOT NULL CHECK (activa IN ('S', 'N')),
    CONSTRAINT fk_oferta_programa_01 FOREIGN KEY (id_programa) REFERENCES "Programa"(id_programa)
);

CREATE TABLE "Oferta_Requisito" (
    id_oferta NUMBER NOT NULL,
    id_requisito NUMBER NOT NULL,
    PRIMARY KEY (id_oferta, id_requisito),
    CONSTRAINT fk_oferta_req_oferta_02 FOREIGN KEY (id_oferta) REFERENCES "Oferta"(id_oferta),
    CONSTRAINT fk_oferta_req_requisito_02 FOREIGN KEY (id_requisito) REFERENCES "Requisitos"(id_requisito)
);

CREATE TABLE "Programa_Asignatura" (
    id_programa NUMBER NOT NULL,
    id_asignatura NUMBER NOT NULL,
    semestre_en_programa NUMBER NOT NULL,
    PRIMARY KEY (id_programa, id_asignatura),
    CONSTRAINT fk_prog_asig_programa_03 FOREIGN KEY (id_programa) REFERENCES "Programa"(id_programa),
    CONSTRAINT fk_prog_asig_asignatura_03 FOREIGN KEY (id_asignatura) REFERENCES "Asignaturas"(id_asignatura)
);

CREATE TABLE "Inscripcion" (
    id_inscripcion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    id_oferta NUMBER NOT NULL,
    tipo_prospecto VARCHAR2(50) NOT NULL,
    fecha_inscripcion DATE DEFAULT SYSDATE NOT NULL,
    estado_inscripcion VARCHAR2(50) DEFAULT 'En progreso' NOT NULL,
    comentarios_admin VARCHAR2(1000),
    CONSTRAINT fk_inscripcion_usuario_04 FOREIGN KEY (id_usuario) REFERENCES "Usuario"(id_usuario),
    CONSTRAINT fk_inscripcion_oferta_04 FOREIGN KEY (id_oferta) REFERENCES "Oferta"(id_oferta)
);

CREATE TABLE "Pago" (
    id_pago NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion NUMBER NOT NULL UNIQUE,
    monto_pago NUMBER(12, 2) NOT NULL,
    fecha_pago DATE DEFAULT SYSDATE NOT NULL,
    estado_pago VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    referencia_pago VARCHAR2(100),
    CONSTRAINT fk_pago_inscripcion_05 FOREIGN KEY (id_inscripcion) REFERENCES "Inscripcion"(id_inscripcion)
);

CREATE TABLE "Documentos" (
    id_documento NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion NUMBER NOT NULL,
    id_requisito NUMBER,
    nombre_archivo VARCHAR2(255) NOT NULL,
    ruta_archivo VARCHAR2(500) NOT NULL,
    tipo_mime VARCHAR2(100),
    fecha_subida DATE DEFAULT SYSDATE NOT NULL,
    estado_documento VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    comentarios_admin VARCHAR2(500),
    CONSTRAINT fk_documentos_inscripcion_06 FOREIGN KEY (id_inscripcion) REFERENCES "Inscripcion"(id_inscripcion),
    CONSTRAINT fk_documentos_requisito_06 FOREIGN KEY (id_requisito) REFERENCES "Requisitos"(id_requisito)
);

CREATE TABLE "Homologacion" (
    id_homologacion NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_inscripcion NUMBER NOT NULL,
    id_asignatura_programa NUMBER NOT NULL,
    nombre_asignatura_externa VARCHAR2(255) NOT NULL,
    justificacion VARCHAR2(1000),
    estado_homologacion VARCHAR2(50) DEFAULT 'Pendiente' NOT NULL,
    comentarios_admin VARCHAR2(500),
    CONSTRAINT fk_homologacion_inscripcion_07 FOREIGN KEY (id_inscripcion) REFERENCES "Inscripcion"(id_inscripcion),
    CONSTRAINT fk_homologacion_asignatura_07 FOREIGN KEY (id_asignatura_programa) REFERENCES "Asignaturas"(id_asignatura)
);

-- 3. Creación de índices (ejecutar después de crear todas las tablas)
CREATE INDEX idx_inscripcion_usuario ON "Inscripcion"(id_usuario);
CREATE INDEX idx_inscripcion_oferta ON "Inscripcion"(id_oferta);
CREATE INDEX idx_documentos_inscripcion ON "Documentos"(id_inscripcion);